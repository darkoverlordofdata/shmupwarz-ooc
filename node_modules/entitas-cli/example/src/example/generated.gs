/**
 * Entitas Generated Components and Extensions for example
 *
 * do not edit this file
 */
[indent=4]
 
uses Entitas

namespace Entitas

    const POOL_SIZE : int = 128

    /**
    * Component extensions
    */
    const components: array of string = {
        "BoundsComponent",
        "BulletComponent",
        "ColorAnimationComponent",
        "EnemyComponent",
        "ExpiresComponent",
        "FiringComponent",
        "HealthComponent",
        "ParallaxStarComponent",
        "PlayerComponent",
        "PositionComponent",
        "ScaleAnimationComponent",
        "SoundEffectComponent",
        "SpriteComponent",
        "VelocityComponent",
        "ScoreComponent",
        "DestroyComponent",
        "MouseComponent",
        "ScaleComponent",
        "ResourceComponent",
        "LayerComponent",
        ""
    }

    enum Component
        Bounds
        Bullet
        ColorAnimation
        Enemy
        Expires
        Firing
        Health
        ParallaxStar
        Player
        Position
        ScaleAnimation
        SoundEffect
        Sprite
        Velocity
        Score
        Destroy
        Mouse
        Scale
        Resource
        Layer




    class BoundsComponent : Object implements IComponent 
        radius : number 

    class BulletComponent : Object implements IComponent 
        active : bool = true

    class ColorAnimationComponent : Object implements IComponent 
        redMin : number 
        redMax : number 
        redSpeed : number 
        greenMin : number 
        greenMax : number 
        greenSpeed : number 
        blueMin : number 
        blueMax : number 
        blueSpeed : number 
        alphaMin : number 
        alphaMax : number 
        alphaSpeed : number 
        redAnimate : boolean 
        greenAnimate : boolean 
        blueAnimate : boolean 
        alphaAnimate : boolean 
        repeat : boolean 

    class EnemyComponent : Object implements IComponent 
        active : bool = true

    class ExpiresComponent : Object implements IComponent 
        delay : number 

    class FiringComponent : Object implements IComponent 
        active : bool = true

    class HealthComponent : Object implements IComponent 
        health : number 
        maximumHealth : number 

    class ParallaxStarComponent : Object implements IComponent 
        active : bool = true

    class PlayerComponent : Object implements IComponent 
        active : bool = true

    class PositionComponent : Object implements IComponent 
        x : number 
        y : number 

    class ScaleAnimationComponent : Object implements IComponent 
        min : number 
        max : number 
        speed : number 
        repeat : boolean 
        active : boolean 

    class SoundEffectComponent : Object implements IComponent 
        effect : number 

    class SpriteComponent : Object implements IComponent 
        layer : number 
        object : Object 

    class VelocityComponent : Object implements IComponent 
        x : number 
        y : number 

    class ScoreComponent : Object implements IComponent 
        value : number 

    class DestroyComponent : Object implements IComponent 
        active : bool = true

    class MouseComponent : Object implements IComponent 
        x : number 
        y : number 

    class ScaleComponent : Object implements IComponent 
        x : number 
        y : number 

    class ResourceComponent : Object implements IComponent 
        name : string 

    class LayerComponent : Object implements IComponent 
        ordinal : number 



    /**
    * Entity extensions
    */
    class Entity : EntityBase

        construct(componentsEnum : array of string, totalComponents : int=32)
            super(componentsEnum, totalComponents)
            /* Preallocate component pools*/
            _BoundsComponentPool = new Bag of BoundsComponent
            for var i=1 to POOL_SIZE
                _BoundsComponentPool.push(new BoundsComponent())

            _BulletComponentPool = new BulletComponent()
            _ColorAnimationComponentPool = new Bag of ColorAnimationComponent
            for var i=1 to POOL_SIZE
                _ColorAnimationComponentPool.push(new ColorAnimationComponent())

            _EnemyComponentPool = new EnemyComponent()
            _ExpiresComponentPool = new Bag of ExpiresComponent
            for var i=1 to POOL_SIZE
                _ExpiresComponentPool.push(new ExpiresComponent())

            _FiringComponentPool = new FiringComponent()
            _HealthComponentPool = new Bag of HealthComponent
            for var i=1 to POOL_SIZE
                _HealthComponentPool.push(new HealthComponent())

            _ParallaxStarComponentPool = new ParallaxStarComponent()

            _PlayerComponentPool = new PlayerComponent()
            _PositionComponentPool = new Bag of PositionComponent
            for var i=1 to POOL_SIZE
                _PositionComponentPool.push(new PositionComponent())
            _ScaleAnimationComponentPool = new Bag of ScaleAnimationComponent
            for var i=1 to POOL_SIZE
                _ScaleAnimationComponentPool.push(new ScaleAnimationComponent())
            _SoundEffectComponentPool = new Bag of SoundEffectComponent
            for var i=1 to POOL_SIZE
                _SoundEffectComponentPool.push(new SoundEffectComponent())
            _SpriteComponentPool = new Bag of SpriteComponent
            for var i=1 to POOL_SIZE
                _SpriteComponentPool.push(new SpriteComponent())
            _VelocityComponentPool = new Bag of VelocityComponent
            for var i=1 to POOL_SIZE
                _VelocityComponentPool.push(new VelocityComponent())
            _ScoreComponentPool = new Bag of ScoreComponent
            for var i=1 to POOL_SIZE
                _ScoreComponentPool.push(new ScoreComponent())

            _DestroyComponentPool = new DestroyComponent()
            _MouseComponentPool = new Bag of MouseComponent
            for var i=1 to POOL_SIZE
                _MouseComponentPool.push(new MouseComponent())
            _ScaleComponentPool = new Bag of ScaleComponent
            for var i=1 to POOL_SIZE
                _ScaleComponentPool.push(new ScaleComponent())
            _ResourceComponentPool = new Bag of ResourceComponent
            for var i=1 to POOL_SIZE
                _ResourceComponentPool.push(new ResourceComponent())
            _LayerComponentPool = new Bag of LayerComponent
            for var i=1 to POOL_SIZE
                _LayerComponentPool.push(new LayerComponent())


        /** Entity: Bounds methods*/

        prop bounds : BoundsComponent
            get
                return (BoundsComponent)getComponent(Component.Bounds)

        prop hasBounds : bool
            get
                return hasComponent(Component.Bounds)
 
        def clearBoundsComponentPool()
            _boundsComponentPool.clear()

        def addBounds(radius:number) : Entity
            var c = _boundsComponentPool.length>0? _boundsComponentPool.pop() : new BoundsComponent()
            c.radius = radius
            addComponent(Component.Bounds, c)
            return this

        def replaceBounds(radius:number) : Entity
            var previousComponent = hasBounds ? this.Bounds : null
            var c = _BoundsComponentPool.length>0? _boundsComponentPool.pop() : new BoundsComponent()
            c.radius = radius
            replaceComponent(Component.Bounds, c) 
            if previousComponent != null
                _boundsComponentPool.push(previousComponent)
            return this

        def removeBounds() : Entity
            var c = this.Bounds
            removeComponent(Component.Bounds) 
            _boundsComponentPool.push(c)
            return this


        /** Entity: Bullet methods*/


        /** @type {boolean} */
        prop isBullet : bool
            get
                return hasComponent(Component.Bullet)
            set
                if value
                    addComponent(Component.Bullet, Entity.BulletComponent)
                else
                    removeComponent(Component.Bullet)
                
        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        def setBullet(value : bool) : Entity
            isBullet = value
            return this


        /** Entity: ColorAnimation methods*/

        prop colorAnimation : ColorAnimationComponent
            get
                return (ColorAnimationComponent)getComponent(Component.ColorAnimation)

        prop hasColorAnimation : bool
            get
                return hasComponent(Component.ColorAnimation)
 
        def clearColorAnimationComponentPool()
            _colorAnimationComponentPool.clear()

        def addColorAnimation(redMin:number,redMax:number,redSpeed:number,greenMin:number,greenMax:number,greenSpeed:number,blueMin:number,blueMax:number,blueSpeed:number,alphaMin:number,alphaMax:number,alphaSpeed:number,redAnimate:boolean,greenAnimate:boolean,blueAnimate:boolean,alphaAnimate:boolean,repeat:boolean) : Entity
            var c = _colorAnimationComponentPool.length>0? _colorAnimationComponentPool.pop() : new ColorAnimationComponent()
            c.redMin = redMin
            c.redMax = redMax
            c.redSpeed = redSpeed
            c.greenMin = greenMin
            c.greenMax = greenMax
            c.greenSpeed = greenSpeed
            c.blueMin = blueMin
            c.blueMax = blueMax
            c.blueSpeed = blueSpeed
            c.alphaMin = alphaMin
            c.alphaMax = alphaMax
            c.alphaSpeed = alphaSpeed
            c.redAnimate = redAnimate
            c.greenAnimate = greenAnimate
            c.blueAnimate = blueAnimate
            c.alphaAnimate = alphaAnimate
            c.repeat = repeat
            addComponent(Component.ColorAnimation, c)
            return this

        def replaceColorAnimation(redMin:number,redMax:number,redSpeed:number,greenMin:number,greenMax:number,greenSpeed:number,blueMin:number,blueMax:number,blueSpeed:number,alphaMin:number,alphaMax:number,alphaSpeed:number,redAnimate:boolean,greenAnimate:boolean,blueAnimate:boolean,alphaAnimate:boolean,repeat:boolean) : Entity
            var previousComponent = hasColorAnimation ? this.ColorAnimation : null
            var c = _ColorAnimationComponentPool.length>0? _colorAnimationComponentPool.pop() : new ColorAnimationComponent()
            c.redMin = redMin
            c.redMax = redMax
            c.redSpeed = redSpeed
            c.greenMin = greenMin
            c.greenMax = greenMax
            c.greenSpeed = greenSpeed
            c.blueMin = blueMin
            c.blueMax = blueMax
            c.blueSpeed = blueSpeed
            c.alphaMin = alphaMin
            c.alphaMax = alphaMax
            c.alphaSpeed = alphaSpeed
            c.redAnimate = redAnimate
            c.greenAnimate = greenAnimate
            c.blueAnimate = blueAnimate
            c.alphaAnimate = alphaAnimate
            c.repeat = repeat
            replaceComponent(Component.ColorAnimation, c) 
            if previousComponent != null
                _colorAnimationComponentPool.push(previousComponent)
            return this

        def removeColorAnimation() : Entity
            var c = this.ColorAnimation
            removeComponent(Component.ColorAnimation) 
            _colorAnimationComponentPool.push(c)
            return this


        /** Entity: Enemy methods*/


        /** @type {boolean} */
        prop isEnemy : bool
            get
                return hasComponent(Component.Enemy)
            set
                if value
                    addComponent(Component.Enemy, Entity.EnemyComponent)
                else
                    removeComponent(Component.Enemy)
                
        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        def setEnemy(value : bool) : Entity
            isEnemy = value
            return this


        /** Entity: Expires methods*/

        prop expires : ExpiresComponent
            get
                return (ExpiresComponent)getComponent(Component.Expires)

        prop hasExpires : bool
            get
                return hasComponent(Component.Expires)
 
        def clearExpiresComponentPool()
            _expiresComponentPool.clear()

        def addExpires(delay:number) : Entity
            var c = _expiresComponentPool.length>0? _expiresComponentPool.pop() : new ExpiresComponent()
            c.delay = delay
            addComponent(Component.Expires, c)
            return this

        def replaceExpires(delay:number) : Entity
            var previousComponent = hasExpires ? this.Expires : null
            var c = _ExpiresComponentPool.length>0? _expiresComponentPool.pop() : new ExpiresComponent()
            c.delay = delay
            replaceComponent(Component.Expires, c) 
            if previousComponent != null
                _expiresComponentPool.push(previousComponent)
            return this

        def removeExpires() : Entity
            var c = this.Expires
            removeComponent(Component.Expires) 
            _expiresComponentPool.push(c)
            return this


        /** Entity: Firing methods*/


        /** @type {boolean} */
        prop isFiring : bool
            get
                return hasComponent(Component.Firing)
            set
                if value
                    addComponent(Component.Firing, Entity.FiringComponent)
                else
                    removeComponent(Component.Firing)
                
        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        def setFiring(value : bool) : Entity
            isFiring = value
            return this


        /** Entity: Health methods*/

        prop health : HealthComponent
            get
                return (HealthComponent)getComponent(Component.Health)

        prop hasHealth : bool
            get
                return hasComponent(Component.Health)
 
        def clearHealthComponentPool()
            _healthComponentPool.clear()

        def addHealth(health:number,maximumHealth:number) : Entity
            var c = _healthComponentPool.length>0? _healthComponentPool.pop() : new HealthComponent()
            c.health = health
            c.maximumHealth = maximumHealth
            addComponent(Component.Health, c)
            return this

        def replaceHealth(health:number,maximumHealth:number) : Entity
            var previousComponent = hasHealth ? this.Health : null
            var c = _HealthComponentPool.length>0? _healthComponentPool.pop() : new HealthComponent()
            c.health = health
            c.maximumHealth = maximumHealth
            replaceComponent(Component.Health, c) 
            if previousComponent != null
                _healthComponentPool.push(previousComponent)
            return this

        def removeHealth() : Entity
            var c = this.Health
            removeComponent(Component.Health) 
            _healthComponentPool.push(c)
            return this


        /** Entity: ParallaxStar methods*/


        /** @type {boolean} */
        prop isParallaxStar : bool
            get
                return hasComponent(Component.ParallaxStar)
            set
                if value
                    addComponent(Component.ParallaxStar, Entity.ParallaxStarComponent)
                else
                    removeComponent(Component.ParallaxStar)
                
        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        def setParallaxStar(value : bool) : Entity
            isParallaxStar = value
            return this


        /** Entity: Player methods*/


        /** @type {boolean} */
        prop isPlayer : bool
            get
                return hasComponent(Component.Player)
            set
                if value
                    addComponent(Component.Player, Entity.PlayerComponent)
                else
                    removeComponent(Component.Player)
                
        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        def setPlayer(value : bool) : Entity
            isPlayer = value
            return this


        /** Entity: Position methods*/

        prop position : PositionComponent
            get
                return (PositionComponent)getComponent(Component.Position)

        prop hasPosition : bool
            get
                return hasComponent(Component.Position)
 
        def clearPositionComponentPool()
            _positionComponentPool.clear()

        def addPosition(x:number,y:number) : Entity
            var c = _positionComponentPool.length>0? _positionComponentPool.pop() : new PositionComponent()
            c.x = x
            c.y = y
            addComponent(Component.Position, c)
            return this

        def replacePosition(x:number,y:number) : Entity
            var previousComponent = hasPosition ? this.Position : null
            var c = _PositionComponentPool.length>0? _positionComponentPool.pop() : new PositionComponent()
            c.x = x
            c.y = y
            replaceComponent(Component.Position, c) 
            if previousComponent != null
                _positionComponentPool.push(previousComponent)
            return this

        def removePosition() : Entity
            var c = this.Position
            removeComponent(Component.Position) 
            _positionComponentPool.push(c)
            return this


        /** Entity: ScaleAnimation methods*/

        prop scaleAnimation : ScaleAnimationComponent
            get
                return (ScaleAnimationComponent)getComponent(Component.ScaleAnimation)

        prop hasScaleAnimation : bool
            get
                return hasComponent(Component.ScaleAnimation)
 
        def clearScaleAnimationComponentPool()
            _scaleAnimationComponentPool.clear()

        def addScaleAnimation(min:number,max:number,speed:number,repeat:boolean,active:boolean) : Entity
            var c = _scaleAnimationComponentPool.length>0? _scaleAnimationComponentPool.pop() : new ScaleAnimationComponent()
            c.min = min
            c.max = max
            c.speed = speed
            c.repeat = repeat
            c.active = active
            addComponent(Component.ScaleAnimation, c)
            return this

        def replaceScaleAnimation(min:number,max:number,speed:number,repeat:boolean,active:boolean) : Entity
            var previousComponent = hasScaleAnimation ? this.ScaleAnimation : null
            var c = _ScaleAnimationComponentPool.length>0? _scaleAnimationComponentPool.pop() : new ScaleAnimationComponent()
            c.min = min
            c.max = max
            c.speed = speed
            c.repeat = repeat
            c.active = active
            replaceComponent(Component.ScaleAnimation, c) 
            if previousComponent != null
                _scaleAnimationComponentPool.push(previousComponent)
            return this

        def removeScaleAnimation() : Entity
            var c = this.ScaleAnimation
            removeComponent(Component.ScaleAnimation) 
            _scaleAnimationComponentPool.push(c)
            return this


        /** Entity: SoundEffect methods*/

        prop soundEffect : SoundEffectComponent
            get
                return (SoundEffectComponent)getComponent(Component.SoundEffect)

        prop hasSoundEffect : bool
            get
                return hasComponent(Component.SoundEffect)
 
        def clearSoundEffectComponentPool()
            _soundEffectComponentPool.clear()

        def addSoundEffect(effect:number) : Entity
            var c = _soundEffectComponentPool.length>0? _soundEffectComponentPool.pop() : new SoundEffectComponent()
            c.effect = effect
            addComponent(Component.SoundEffect, c)
            return this

        def replaceSoundEffect(effect:number) : Entity
            var previousComponent = hasSoundEffect ? this.SoundEffect : null
            var c = _SoundEffectComponentPool.length>0? _soundEffectComponentPool.pop() : new SoundEffectComponent()
            c.effect = effect
            replaceComponent(Component.SoundEffect, c) 
            if previousComponent != null
                _soundEffectComponentPool.push(previousComponent)
            return this

        def removeSoundEffect() : Entity
            var c = this.SoundEffect
            removeComponent(Component.SoundEffect) 
            _soundEffectComponentPool.push(c)
            return this


        /** Entity: Sprite methods*/

        prop sprite : SpriteComponent
            get
                return (SpriteComponent)getComponent(Component.Sprite)

        prop hasSprite : bool
            get
                return hasComponent(Component.Sprite)
 
        def clearSpriteComponentPool()
            _spriteComponentPool.clear()

        def addSprite(layer:number,object:Object) : Entity
            var c = _spriteComponentPool.length>0? _spriteComponentPool.pop() : new SpriteComponent()
            c.layer = layer
            c.object = object
            addComponent(Component.Sprite, c)
            return this

        def replaceSprite(layer:number,object:Object) : Entity
            var previousComponent = hasSprite ? this.Sprite : null
            var c = _SpriteComponentPool.length>0? _spriteComponentPool.pop() : new SpriteComponent()
            c.layer = layer
            c.object = object
            replaceComponent(Component.Sprite, c) 
            if previousComponent != null
                _spriteComponentPool.push(previousComponent)
            return this

        def removeSprite() : Entity
            var c = this.Sprite
            removeComponent(Component.Sprite) 
            _spriteComponentPool.push(c)
            return this


        /** Entity: Velocity methods*/

        prop velocity : VelocityComponent
            get
                return (VelocityComponent)getComponent(Component.Velocity)

        prop hasVelocity : bool
            get
                return hasComponent(Component.Velocity)
 
        def clearVelocityComponentPool()
            _velocityComponentPool.clear()

        def addVelocity(x:number,y:number) : Entity
            var c = _velocityComponentPool.length>0? _velocityComponentPool.pop() : new VelocityComponent()
            c.x = x
            c.y = y
            addComponent(Component.Velocity, c)
            return this

        def replaceVelocity(x:number,y:number) : Entity
            var previousComponent = hasVelocity ? this.Velocity : null
            var c = _VelocityComponentPool.length>0? _velocityComponentPool.pop() : new VelocityComponent()
            c.x = x
            c.y = y
            replaceComponent(Component.Velocity, c) 
            if previousComponent != null
                _velocityComponentPool.push(previousComponent)
            return this

        def removeVelocity() : Entity
            var c = this.Velocity
            removeComponent(Component.Velocity) 
            _velocityComponentPool.push(c)
            return this


        /** Entity: Score methods*/

        prop score : ScoreComponent
            get
                return (ScoreComponent)getComponent(Component.Score)

        prop hasScore : bool
            get
                return hasComponent(Component.Score)
 
        def clearScoreComponentPool()
            _scoreComponentPool.clear()

        def addScore(value:number) : Entity
            var c = _scoreComponentPool.length>0? _scoreComponentPool.pop() : new ScoreComponent()
            c.value = value
            addComponent(Component.Score, c)
            return this

        def replaceScore(value:number) : Entity
            var previousComponent = hasScore ? this.Score : null
            var c = _ScoreComponentPool.length>0? _scoreComponentPool.pop() : new ScoreComponent()
            c.value = value
            replaceComponent(Component.Score, c) 
            if previousComponent != null
                _scoreComponentPool.push(previousComponent)
            return this

        def removeScore() : Entity
            var c = this.Score
            removeComponent(Component.Score) 
            _scoreComponentPool.push(c)
            return this


        /** Entity: Destroy methods*/


        /** @type {boolean} */
        prop isDestroy : bool
            get
                return hasComponent(Component.Destroy)
            set
                if value
                    addComponent(Component.Destroy, Entity.DestroyComponent)
                else
                    removeComponent(Component.Destroy)
                
        /**
         * @param {boolean} value
         * @returns {entitas.Entity}
         */
        def setDestroy(value : bool) : Entity
            isDestroy = value
            return this


        /** Entity: Mouse methods*/

        prop mouse : MouseComponent
            get
                return (MouseComponent)getComponent(Component.Mouse)

        prop hasMouse : bool
            get
                return hasComponent(Component.Mouse)
 
        def clearMouseComponentPool()
            _mouseComponentPool.clear()

        def addMouse(x:number,y:number) : Entity
            var c = _mouseComponentPool.length>0? _mouseComponentPool.pop() : new MouseComponent()
            c.x = x
            c.y = y
            addComponent(Component.Mouse, c)
            return this

        def replaceMouse(x:number,y:number) : Entity
            var previousComponent = hasMouse ? this.Mouse : null
            var c = _MouseComponentPool.length>0? _mouseComponentPool.pop() : new MouseComponent()
            c.x = x
            c.y = y
            replaceComponent(Component.Mouse, c) 
            if previousComponent != null
                _mouseComponentPool.push(previousComponent)
            return this

        def removeMouse() : Entity
            var c = this.Mouse
            removeComponent(Component.Mouse) 
            _mouseComponentPool.push(c)
            return this


        /** Entity: Scale methods*/

        prop scale : ScaleComponent
            get
                return (ScaleComponent)getComponent(Component.Scale)

        prop hasScale : bool
            get
                return hasComponent(Component.Scale)
 
        def clearScaleComponentPool()
            _scaleComponentPool.clear()

        def addScale(x:number,y:number) : Entity
            var c = _scaleComponentPool.length>0? _scaleComponentPool.pop() : new ScaleComponent()
            c.x = x
            c.y = y
            addComponent(Component.Scale, c)
            return this

        def replaceScale(x:number,y:number) : Entity
            var previousComponent = hasScale ? this.Scale : null
            var c = _ScaleComponentPool.length>0? _scaleComponentPool.pop() : new ScaleComponent()
            c.x = x
            c.y = y
            replaceComponent(Component.Scale, c) 
            if previousComponent != null
                _scaleComponentPool.push(previousComponent)
            return this

        def removeScale() : Entity
            var c = this.Scale
            removeComponent(Component.Scale) 
            _scaleComponentPool.push(c)
            return this


        /** Entity: Resource methods*/

        prop resource : ResourceComponent
            get
                return (ResourceComponent)getComponent(Component.Resource)

        prop hasResource : bool
            get
                return hasComponent(Component.Resource)
 
        def clearResourceComponentPool()
            _resourceComponentPool.clear()

        def addResource(name:string) : Entity
            var c = _resourceComponentPool.length>0? _resourceComponentPool.pop() : new ResourceComponent()
            c.name = name
            addComponent(Component.Resource, c)
            return this

        def replaceResource(name:string) : Entity
            var previousComponent = hasResource ? this.Resource : null
            var c = _ResourceComponentPool.length>0? _resourceComponentPool.pop() : new ResourceComponent()
            c.name = name
            replaceComponent(Component.Resource, c) 
            if previousComponent != null
                _resourceComponentPool.push(previousComponent)
            return this

        def removeResource() : Entity
            var c = this.Resource
            removeComponent(Component.Resource) 
            _resourceComponentPool.push(c)
            return this


        /** Entity: Layer methods*/

        prop layer : LayerComponent
            get
                return (LayerComponent)getComponent(Component.Layer)

        prop hasLayer : bool
            get
                return hasComponent(Component.Layer)
 
        def clearLayerComponentPool()
            _layerComponentPool.clear()

        def addLayer(ordinal:number) : Entity
            var c = _layerComponentPool.length>0? _layerComponentPool.pop() : new LayerComponent()
            c.ordinal = ordinal
            addComponent(Component.Layer, c)
            return this

        def replaceLayer(ordinal:number) : Entity
            var previousComponent = hasLayer ? this.Layer : null
            var c = _LayerComponentPool.length>0? _layerComponentPool.pop() : new LayerComponent()
            c.ordinal = ordinal
            replaceComponent(Component.Layer, c) 
            if previousComponent != null
                _layerComponentPool.push(previousComponent)
            return this

        def removeLayer() : Entity
            var c = this.Layer
            removeComponent(Component.Layer) 
            _layerComponentPool.push(c)
            return this

