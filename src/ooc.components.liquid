use sdl2
import math
import sdl2/[Core, Event, Image]
import structs/ArrayList
import structs/LinkedList
import structs/Stack
import entitas/Entity
import entitas/Exceptions
import entitas/Group
import entitas/Interfaces
import entitas/Matcher
import entitas/World
import entitas/events/EntityChanged
import entitas/events/EntityReleased
import entitas/events/GroupChanged
import entitas/events/GroupsChanged
import entitas/events/GroupUpdated
import entitas/events/WorldChanged
import entitas/events/ComponentReplaced
/**
 * Entitas Generated Components and Extensions for {{ namespace }}
 *
 * do not edit this file
 */
POOL_SIZE := {{ alloc.components }}

/**
* Component extensions
*/
components := [
{% for component in components %}    "{{ component.key }}Component",
{% endfor %}    "ComponentsCount"
    ]

Component: enum {
{% for component in components %}    {{ component.key }}
{% endfor %}    ComponentsCount
}

{% for component in components %}
{{ component.key }}Component : class extends IComponent {
{% if component.value == false %}    active : Bool = true
    init: func()
}
{% else %}{% for field in component.value %}    {{ field | property }} : {{ field | fieldType }} 
{% endfor %}    init: func()
}{% endif %}{% endfor %}


/**
* Entity extensions
*/
extend Entity {

{% for component in components %}
    /* Entity: {{ component.key }} methods*/
{% if component.value == false %}
    /** @type boolean */
    is{{ component.key }} : Bool {
        get { hasComponent(Component {{ component.key }} as Int) }
    }
    /**
     * @param value boolean
     * @return entitas.Entity
     */
    set{{ component.key }}: func(value : Bool) -> This {
        index := Component {{ component.key }} as Int
        c := __{{ component.key | camel }}Component
        if (value) {
            addComponent(index, c)
        } else {
            removeComponent(index)
        }
        this
    }

{% else %}
    /** @type {{ component.key }} */
    get{{ component.key }}: func() -> {{ component.key }}Component {
        getComponent(Component {{ component.key }} as Int) as {{ component.key }}Component
    }
    /** @type boolean */
    has{{ component.key }} : Bool {
        get { hasComponent(Component {{ component.key }} as Int) }
    }
    clear{{ component.key }}ComponentPool: func() {
        __{{ component.key | camel }}ComponentPool clear()
    }
    /**{% for field in component.value %}
     * @param {{ field | property }} {{ field | fieldType }}{% endfor %}
     * @return entitas.Entity
     */
    add{{ component.key }}: func({{ component.value }}) -> This {
        c := __{{ component.key | camel }}ComponentPool size > 0 ? __{{ component.key | camel }}ComponentPool pop() : {{ component.key }}Component new()
        {% for field in component.value %}c {{ field | property }} = {{ field | property | camel }}
        {% endfor %}addComponent(Component {{ component.key }} as Int, c)
        this
    }
    /**{% for field in component.value %}
     * @param {{ field | property }} {{ field | fieldType }}{% endfor %}
     * @return entitas.Entity
     */
    replace{{ component.key }}: func({{ component.value }}) -> This {
        previousComponent := this has{{ component.key }} ? this get{{ component.key }}() : null
        c := __{{ component.key | camel }}ComponentPool size > 0 ? __{{ component.key | camel }}ComponentPool pop() : {{ component.key }}Component new()
        {% for field in component.value %}c {{ field | property }} = {{ field | property | camel }}
        {% endfor %}replaceComponent(Component {{ component.key }} as Int, c) 
        if (previousComponent != null)
            __{{ component.key | camel }}ComponentPool push(previousComponent)
        this
    }
    /**
     * @returns entitas.Entity
     */
    remove{{ component.key }}: func() -> This {
        c := get{{ component.key }}()
        removeComponent(Component {{ component.key }} as Int) 
        __{{ component.key | camel }}ComponentPool push(c)
        this
    }

{% endif %}{% endfor %}
    initPools: func(){
        /* Preallocate component pools*/
{% for component in components %}{% if component.value == false %}
        __{{ component.key | camel }}Component = {{ component.key }}Component new()
{% else %}        __{{ component.key | camel }}ComponentPool = Stack<{{ component.key }}Component> new()
        for(i in 1..POOL_SIZE) 
            __{{ component.key | camel }}ComponentPool push({{ component.key }}Component new())
{% endif %}{% endfor %}
    }
}

{% for component in components %}{% if component.value == false %}
/** @type {{ component.key }} */
__{{ component.key | camel }}Component : {{ component.key }}Component
{% else %}    /** @type Stack<{{ component.key }}> */
__{{ component.key | camel }}ComponentPool : Stack<{{ component.key }}Component>
{% endif %}{% endfor %}

